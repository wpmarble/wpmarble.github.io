thetext = gsub(pattern = "[ ]+", replacement = " ", thetext)
# let's split up the string using the "\r\n \r\n" identifier
thetext = strsplit(thetext, split= "\r\n \r\n")[[1]]
thetext
thetext = gsub(pattern="\\r|\\n", replacement="", thetext) %>% str_trim
thetext = thetext[thetext != ""]
thetext
thetext = html_text(my_nodes[[4]])
thetext = gsub(pattern = "[ ]+", replacement = " ", thetext)
# let's split up the string using the "\r\n \r\n" identifier
thetext = strsplit(thetext, split= "\r\n \r\n")[[1]]
thetext
thetext = gsub(pattern="\\r|\\n", replacement="", thetext) %>% str_trim
thetext = thetext[thetext != ""]
thetext
thetext = html_text(my_nodes[[4]])
thetext
thetext = gsub(pattern = "[ ]+", replacement = " ", thetext)
# let's split up the string using the "\r\n \r\n" identifier
thetext = strsplit(thetext, split= "\r\n \r\n")[[1]]
thetext
thetext = html_text(my_nodes[[4]])
thetext
thetext = gsub(pattern = "[ ]+", replacement = " ", thetext)
# let's split up the string using the "\r\n \r\n" identifier
thetext = strsplit(thetext, split= "\r\n \r\n|\r\n Topic Areas:")[[1]]
thetext
thetext = html_text(my_nodes[[4]])
thetext
thetext = gsub(pattern = "[ ]+", replacement = " ", thetext)
# let's split up the string using the "\r\n \r\n" identifier
thetext = strsplit(thetext, split= "\r\n \r\n|\r\n Topic")[[1]]
thetext
thetext = gsub(pattern="\\r|\\n", replacement="", thetext) %>% str_trim
thetext = thetext[thetext != ""]
thetext
title = thetext[1]
name = thetext[2]
election = thetext[3] %>% gsub("Election: ", "", x = .) %>% str_trim
type = thetext[4] %>% gsub("Type: ", "", x = .) %>% str_trim
type
summary = thetext[8]
summary
thetext[5]
status = thetext[5] %>% gsub("Status: ", "", x=.) %>% str_trim
status
thetext[4]
thetext[6]
thetext = html_text(my_nodes[[10]])
thetext
thetext = gsub(pattern = "[ ]+", replacement = " ", thetext)
# let's split up the string using the "\r\n \r\n" identifier plus the one field that's
# not separated by two line breaks -- topic areas
thetext = strsplit(thetext, split= "\r\n \r\n|\r\n Topic")[[1]]
thetext
thetext = gsub(pattern="\\r|\\n", replacement="", thetext) %>% str_trim
thetext = thetext[thetext != ""]
thetext
title = thetext[1]
name = thetext[2]
election = thetext[3] %>% gsub("Election: ", "", x = .) %>% str_trim
type = thetext[4] %>% gsub("Type: ", "", x = .) %>% str_trim
status = thetext[5] %>% gsub("Status: ", "", x=.) %>% str_trim
summary = thetext[8]
title
name
election
type
status
summary
thetext[6]
thetext = html_text(my_nodes[[4]])
thetext
thetext = html_text(my_nodes[[100]])
thetext
thetext = html_text(my_nodes[[50]])
thetext
my_nodes %>% length
thetext = html_text(my_nodes[[165]])
thetext
thetext = html_text(my_nodes[[164]])
thetext
thetext = html_text(my_nodes[[164]])
thetext
thetext = gsub(pattern = "[ ]+", replacement = " ", thetext)
# let's split up the string using the "\r\n \r\n" identifier plus the one field that's
# not separated by two line breaks -- topic areas
thetext = strsplit(thetext, split= "\r\n \r\n|\r\n Topic")[[1]]
thetext
thetext = gsub(pattern="\\r|\\n", replacement="", thetext) %>% str_trim
thetext = thetext[thetext != ""]
thetext
title = thetext[1]
name = thetext[2]
election = thetext[3] %>% gsub("Election: ", "", x = .) %>% str_trim
type = thetext[4] %>% gsub("Type: ", "", x = .) %>% str_trim
status = thetext[5] %>% gsub("Status: ", "", x=.) %>% str_trim
summary = thetext[8]
title
name
election
type
status
summary
thetext[6]
html_text
pkgs = c("rvest", "magrittr", "httr", "stringr")
for (pkg in pkgs){
if (!require(pkg, character.only = T)){
install.packages(pkg)
library(pkg)
}
}
html_text
my_nodes[1:8]
measures = read_html("http://stanford.edu/~wpmarble/webscraping_tutorial/html/ballot_measures_2016.html")
# STEP 3
# Select the nodes I want -- I can use the | character to return both types of
# Xpath selectors I want
selector = '//*[contains(concat( " ", @class, " " ), concat( " ", "divRepeaterResults", " " ))]|//*[contains(concat( " ", @class, " " ), concat( " ", "h2Headers", " " ))]'
my_nodes = measures %>% html_nodes(xpath=selector)
my_nodes[1:8]
my_nodes[1:9]
my_nodes[[164]]
strwrap(thetext, 70)
thetext = html_text(my_nodes[[164]])
strwrap(thetext, 70)
measures = read_html("http://stanford.edu/~wpmarble/webscraping_tutorial/html/ballot_measures_2016.html")
# STEP 3
# Select the nodes I want -- I can use the | character to return both types of
# Xpath selectors I want
selector = '//*[contains(concat( " ", @class, " " ), concat( " ", "divRepeaterResults", " " ))]|//*[contains(concat( " ", @class, " " ), concat( " ", "h2Headers", " " ))]'
my_nodes = measures %>% html_nodes(xpath=selector)
my_nodes[1:9]
# the first 6 nodes don't have information I want so get rid of them
my_nodes = my_nodes[-c(1:6)]
thetext = html_text(my_nodes[[164]])
strwrap(thetext, 70)
print(strwrap(thetext, 70))
print(strwrap(thetext, 50))
measures = read_html("http://stanford.edu/~wpmarble/webscraping_tutorial/html/ballot_measures_2016.html")
# STEP 3
# Select the nodes I want -- I can use the | character to return both types of
# Xpath selectors I want
selector = '//*[contains(concat( " ", @class, " " ), concat( " ", "divRepeaterResults", " " ))]|//*[contains(concat( " ", @class, " " ), concat( " ", "h2Headers", " " ))]'
my_nodes = measures %>% html_nodes(xpath=selector)
my_nodes[1:9]
# the first 6 nodes don't have information I want so get rid of them
my_nodes = my_nodes[-c(1:6)]
thetext = html_text(my_nodes[[164]])
html_text(my_nodes[[164]])
measures = read_html("http://stanford.edu/~wpmarble/webscraping_tutorial/html/ballot_measures_2016.html")
# STEP 3
# Select the nodes I want -- I can use the | character to return both types of
# Xpath selectors I want
selector = '//*[contains(concat( " ", @class, " " ), concat( " ", "divRepeaterResults", " " ))]|//*[contains(concat( " ", @class, " " ), concat( " ", "h2Headers", " " ))]'
my_nodes = measures %>% html_nodes(xpath=selector)
my_nodes[1:9]
# the first 6 nodes don't have information I want so get rid of them
my_nodes = my_nodes[-c(1:6)]
thetext = html_text(my_nodes[[164]])
# get rid of all those extra spaces
thetext = gsub(pattern = "[ ]+", replacement = " ", thetext)
thetext
thetext = strsplit(thetext, split= "\r\n \r\n|\r\n Topic")[[1]]
thetext
thetext
thetext = html_text(my_nodes[[164]])
# get rid of all those extra spaces
thetext = gsub(pattern = "[ ]+", replacement = " ", thetext)
# let's split up the string using the "\r\n \r\n" identifier plus the one field that's
# not separated by two line breaks -- topic areas
thetext = strsplit(thetext, split= "\r\n \r\n|\r\n Topic")[[1]]
thetext
thetext = gsub(pattern="\\r|\\n", replacement="", thetext) %>% str_trim
thetext = thetext[thetext != ""]
title = thetext[1]
name = thetext[2]
election = thetext[3] %>% gsub("Election: ", "", x = .) %>% str_trim
type = thetext[4] %>% gsub("Type: ", "", x = .) %>% str_trim
status = thetext[5] %>% gsub("Status: ", "", x=.) %>% str_trim
summary = thetext[8]
thetext[6]
topic_area = gsub("Area: ", "", thetext[6]) %>% str_trim
topic_area
topic_area = gsub("^Area:|^Areas:", "", thetext[6]) %>% str_trim
topic_area
topic_areas = gsub("^Area:|^Areas:", "", thetext[6]) %>% str_trim
topi_areas = strsplit(topic_areas, split = "|")
topic_areas = strsplit(topic_areas, split = "|")
topic_areas
topic_areas = gsub("^Area:|^Areas:", "", thetext[6]) %>% str_trim
topic_areas
topic_areas = gsub("^Area:|^Areas:", "", thetext[6]) %>% str_trim
topic_areas = strsplit(topic_areas, split = "\|")
topic_areas = strsplit(topic_areas, split = "\\|")
topic_areas
topic_areas = strsplit(topic_areas, split = "\\|")[[1]]
topic_areas = gsub("^Area:|^Areas:", "", thetext[6]) %>% str_trim
topic_areas = strsplit(topic_areas, split = "\\|")[[1]]
topic_areas
topic_areas %>% length
topic_areas = strsplit(topic_areas, split = "\\|")[[1]] %>% str_trim
topic_areas
topic_areas = gsub("^Area:|^Areas:", "", thetext[6]) %>% str_trim
topic_areas = strsplit(topic_areas, split = "\\|")[[1]] %>% str_trim
topic_areas
title;name;election;type;status;summary;topic_areas
topic_areas = strsplit(topic_areas, split = "\\|")[[1]] %>% str_trim %>% as.list
topic_areas = gsub("^Area:|^Areas:", "", thetext[6]) %>% str_trim
topic_areas
topic_areas = strsplit(topic_areas, split = "\\|")[[1]] %>% str_trim %>% as.list
topic_areas
state_or_info = my_nodes %>% html_attr("class")
state_or_info = ifelse(state_or_info == "h2Headers", "state", "info")
# get the number of initiatives
n_initiatives = sum(state_or_info == "info")
# set up data frame to store results
results_df = data.frame(state = rep(NA_character_, n_initiatives),
name = NA_character_,
title = NA_character_,
election = NA_character_,
type = NA_character_,
status = NA_character_,
topic_areas = NA,
summary = NA_character_)
# keep track of what state we're in
state = NA_character_
for (i in 1:length(my_nodes)){
if (state_or_info[i] == "state") {
state = html_text(my_nodes[[i]])
}
else {
results_df$state[i] = state # fill in state
# parse text like above
thetext = html_text(my_nodes[[i]])
thetext = gsub(pattern = "[ ]+", replacement = " ", thetext)
thetext = strsplit(thetext, split= "\r\n \r\n|\r\n Topic")[[1]]
thetext = gsub(pattern="\\r|\\n", replacement="", thetext) %>% str_trim
thetext = thetext[thetext != ""]
topic_areas = gsub("^Area:|^Areas:", "", thetext[6]) %>% str_trim
topic_areas = strsplit(topic_areas, split = "\\|")[[1]] %>% str_trim %>% as.list
results_df$title[i] = thetext[1]
results_df$name[i] = thetext[2]
results_df$election[i] = thetext[3] %>% gsub("Election: ", "", x = .) %>% str_trim
results_df$type[i] = thetext[4] %>% gsub("Type: ", "", x = .) %>% str_trim
results_df$status[i] = thetext[5] %>% gsub("Status: ", "", x=.) %>% str_trim
results_df$summary[i] = thetext[8]
results_df$topic_areas[i] = topic_areas
}
}
warnings()
results_df = data.frame(state = rep(NA_character_, n_initiatives),
name = NA_character_,
title = NA_character_,
election = NA_character_,
type = NA_character_,
status = NA_character_,
topic_areas = NA,
summary = NA_character_)
results_df
topic_areas = thetext[6] %>% gsub("^Area:|^Areas:", "", x=.) %>% str_trim
topic_areas
state_or_info = my_nodes %>% html_attr("class")
state_or_info = ifelse(state_or_info == "h2Headers", "state", "info")
# get the number of initiatives
n_initiatives = sum(state_or_info == "info")
# set up data frame to store results
results_df = data.frame(state = rep(NA_character_, n_initiatives),
name = NA_character_,
title = NA_character_,
election = NA_character_,
type = NA_character_,
status = NA_character_,
topic_areas = NA,
summary = NA_character_)
# keep track of what state we're in
state = NA_character_
for (i in 1:length(my_nodes)){
if (state_or_info[i] == "state") {
state = html_text(my_nodes[[i]])
}
else {
results_df$state[i] = state # fill in state
# parse text like above
thetext = html_text(my_nodes[[i]])
thetext = gsub(pattern = "[ ]+", replacement = " ", thetext)
thetext = strsplit(thetext, split= "\r\n \r\n|\r\n Topic")[[1]]
thetext = gsub(pattern="\\r|\\n", replacement="", thetext) %>% str_trim
thetext = thetext[thetext != ""]
results_df$title[i] = thetext[1]
results_df$name[i] = thetext[2]
results_df$election[i] = thetext[3] %>% gsub("Election: ", "", x = .) %>% str_trim
results_df$type[i] = thetext[4] %>% gsub("Type: ", "", x = .) %>% str_trim
results_df$status[i] = thetext[5] %>% gsub("Status: ", "", x=.) %>% str_trim
results_df$summary[i] = thetext[8]
resulfs_df$topic_areas[i] = thetext[6] %>% gsub("^Area:|^Areas:", "", x=.) %>% str_trim
}
}
results_df = data.frame(state = rep(NA_character_, n_initiatives),
name = NA_character_,
title = NA_character_,
election = NA_character_,
type = NA_character_,
status = NA_character_,
topic_areas = NA,
summary = NA_character_)
lapply(results_df, class)
?data.frame
results_df = data.frame(state = rep(NA_character_, n_initiatives),
name = NA_character_,
title = NA_character_,
election = NA_character_,
type = NA_character_,
status = NA_character_,
topic_areas = NA,
summary = NA_character_,
stringsAsFactors = F)
?data.frame
lapply(results_df, class)
# keep track of what state we're in
state = NA_character_
for (i in 1:length(my_nodes)){
if (state_or_info[i] == "state") {
state = html_text(my_nodes[[i]])
}
else {
results_df$state[i] = state # fill in state
# parse text like above
thetext = html_text(my_nodes[[i]])
thetext = gsub(pattern = "[ ]+", replacement = " ", thetext)
thetext = strsplit(thetext, split= "\r\n \r\n|\r\n Topic")[[1]]
thetext = gsub(pattern="\\r|\\n", replacement="", thetext) %>% str_trim
thetext = thetext[thetext != ""]
results_df$title[i] = thetext[1]
results_df$name[i] = thetext[2]
results_df$election[i] = thetext[3] %>% gsub("Election: ", "", x = .) %>% str_trim
results_df$type[i] = thetext[4] %>% gsub("Type: ", "", x = .) %>% str_trim
results_df$status[i] = thetext[5] %>% gsub("Status: ", "", x=.) %>% str_trim
results_df$summary[i] = thetext[8]
results_df$topic_areas[i] = thetext[6] %>% gsub("^Area:|^Areas:", "", x=.) %>% str_trim
}
}
state
length(my_nodes)
state_or_info = my_nodes %>% html_attr("class")
state_or_info = ifelse(state_or_info == "h2Headers", "state", "info")
# set up data frame to store results
results_df = data.frame(state = rep(NA_character_, length(my_nodes)),
name = NA_character_,
title = NA_character_,
election = NA_character_,
type = NA_character_,
status = NA_character_,
topic_areas = NA,
summary = NA_character_,
stringsAsFactors = F)
# keep track of what state we're in
state = NA_character_
for (i in 1:length(my_nodes)){
if (state_or_info[i] == "state") {
state = html_text(my_nodes[[i]])
}
else {
results_df$state[i] = state # fill in state
# parse text like above
thetext = html_text(my_nodes[[i]])
thetext = gsub(pattern = "[ ]+", replacement = " ", thetext)
thetext = strsplit(thetext, split= "\r\n \r\n|\r\n Topic")[[1]]
thetext = gsub(pattern="\\r|\\n", replacement="", thetext) %>% str_trim
thetext = thetext[thetext != ""]
results_df$title[i] = thetext[1]
results_df$name[i] = thetext[2]
results_df$election[i] = thetext[3] %>% gsub("Election: ", "", x = .) %>% str_trim
results_df$type[i] = thetext[4] %>% gsub("Type: ", "", x = .) %>% str_trim
results_df$status[i] = thetext[5] %>% gsub("Status: ", "", x=.) %>% str_trim
results_df$summary[i] = thetext[8]
results_df$topic_areas[i] = thetext[6] %>% gsub("^Area:|^Areas:", "", x=.) %>% str_trim
}
}
results_df %>% View
thetext = html_text(my_nodes[[128]])
# get rid of all those extra spaces
thetext = gsub(pattern = "[ ]+", replacement = " ", thetext)
# let's split up the string using the "\r\n \r\n" identifier plus the one field that's
# not separated by two line breaks -- topic areas
thetext = strsplit(thetext, split= "\r\n \r\n|\r\n Topic")[[1]]
thetext
thetext = gsub(pattern="\\r|\\n", replacement="", thetext) %>% str_trim
thetext = thetext[thetext != ""]
thetext
election = thetext[grepl(pattern = "^Election", thetext)]
election
election = thetext[grepl(pattern = "^Election", thetext)] %>% gsub("Election:", "", x = .) %>% str_trim
election
type = thetext[grepl(pattern = "^Type", thetext)] %>% gsub("Type:", "", x = .) %>% str_trim
type
status = thetext[grepl(pattern = "^Status", thetext)] %>% gsub("Status:", "", x = .) %>% str_trim
status
thetext
summary_index = grepl(pattern="^Summary", thetext)
summary_index
grepl(pattern="^Summary", thetext) %>% which
summary_index = grepl(pattern="^Summary", thetext) %>% which + 1
summary_index
summary = thetext[summary_index]
summary
topic_areas = thetext[grepl(pattern = "^Area:|Areas:", thetext)] %>% gsub("Area:|Areas:", "", x = .) %>% str_trim
topic_areas
# set up data frame to store results
results_df = data.frame(state = rep(NA_character_, length(my_nodes)),
title = NA_character_,
election = NA_character_,
type = NA_character_,
status = NA_character_,
topic_areas = NA,
summary = NA_character_,
stringsAsFactors = F)
# keep track of what state we're in
state = NA_character_
for (i in 1:length(my_nodes)){
if (state_or_info[i] == "state") {
state = html_text(my_nodes[[i]])
}
else {
results_df$state[i] = state # fill in state
# parse text like above
thetext = html_text(my_nodes[[i]])
thetext = gsub(pattern = "[ ]+", replacement = " ", thetext)
thetext = strsplit(thetext, split= "\r\n \r\n|\r\n Topic")[[1]]
thetext = gsub(pattern="\\r|\\n", replacement="", thetext) %>% str_trim
thetext = thetext[thetext != ""]
results_df$title[i] = thetext[1]
results_df$election[i] = thetext[grepl(pattern = "^Election", thetext)] %>% gsub("Election:", "", x = .) %>% str_trim
results_df$type[i] = thetext[grepl(pattern = "^Type", thetext)] %>% gsub("Type:", "", x = .) %>% str_trim
results_df$status[i] = thetext[grepl(pattern = "^Status", thetext)] %>% gsub("Status:", "", x = .) %>% str_trim
results_df$topic_areas[i] = thetext[grepl(pattern = "^Area:|Areas:", thetext)] %>% gsub("Area:|Areas:", "", x = .) %>% str_trim
summary_index = grepl(pattern="^Summary", thetext) %>% which + 1
results_df$summary[i] = thetext[summary_index]
}
}
results_df %>% View
results_df = results_df[!is.na(results_df$state),]
results_df %>% View
head(results_df)
results_df[1:5, 1:5]
results_df[1:5, 1:6]
for (x in c("title", "election", "type", "status", "summary", "topic_areas")){
cat(x,": ", get(x))
}
for (x in c("title", "election", "type", "status", "summary", "topic_areas")){
cat(x,": ", get(x), "\n")
}
state_or_info = my_nodes %>% html_attr("class")
unique(state_or_info)
?regex
?regexpr
grep("what", "what does this mean")
grep("what", "what does this mean what")
grep("what", c("what does this mean", "not this", "what")
)
string = c("this is", "a string")
grepl("this", string)
gsub(pattern="is", replacement="WTF", string)
grep(pattern="^Summary", thetext)
thetext = html_text(my_nodes[[128]])  # randomly chose 128 as an example to work thru
# get rid of all those extra spaces
thetext = gsub(pattern = "[ ]+", replacement = " ", thetext)
# let's split up the string using the "\r\n \r\n" identifier plus the one field that's
# not separated by two line breaks -- topic areas
thetext = strsplit(thetext, split= "\r\n \r\n|\r\n Topic")[[1]]
thetext
thetext = gsub(pattern="\\r|\\n", replacement="", thetext) %>% str_trim
thetext = thetext[thetext != ""]
thetext
title = thetext[1]
election = thetext[grepl(pattern = "^Election", thetext)] %>%
gsub("Election:", "", x = .) %>% str_trim
type = thetext[grepl(pattern = "^Type", thetext)] %>%
gsub("Type:", "", x = .) %>% str_trim
status = thetext[grepl(pattern = "^Status", thetext)] %>%
gsub("Status:", "", x = .) %>% str_trim
topic_areas = thetext[grepl(pattern = "^Area:|Areas:", thetext)] %>%
gsub("Area:|Areas:", "", x = .) %>% str_trim
# summary is a little trickier to get because the actual summary comes
# the entry after the one that says "Summary: Click for Summary"
summary_index = grep(pattern="^Summary", thetext) + 1
summary = thetext[summary_index]
for (x in c("title", "election", "type", "status", "summary", "topic_areas")){
cat(x,": ", get(x), "\n")
}
grep("this", string)
string = c("this is", "a string", "vector", "this")
grep("this", string)
require("rvest")
pkgs = c("rvest", "magrittr", "httr", "stringr", "ggplot2", "rjson")
for (pkg in pkgs){
if (!require(pkg)){
install.packages(pkg)
library(pkg)
}
}
pkgs = c("rvest", "magrittr", "httr", "stringr", "ggplot2", "rjson")
for (pkg in pkgs){
if (!require(pkg, character.only = T)){
install.packages(pkg)
library(pkg)
}
}
## Read my example html with read_html()
silly_webpage = read_html("http://stanford.edu/~wpmarble/webscraping_tutorial/html/silly_webpage.html")
silly_webpage
